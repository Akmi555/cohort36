// Единицы измерения памяти:
// 1 бит - место под 0 или 1 - минимальный ОБЪЁМ памяти (используются при передаче данных)
// 1 байт - 8 (2^3) бит - минимальная ЯЧЕЙКА памяти с точки зрения компьютера
// 1 килобайт - 1024 (2^10) байт
// 1 мегабайт - 1024 килобайта
// 1 гигабайт - 1024 мегабайта
// 1 терабайт - 1024 гигабайта
// 1 петабайт - 1024 терабайта
// флешка:
// 64 гигайбата = для производителя это 64 000 000 000 байт
//   для операционной системы это 
//   - 64 000 000 000 байт
//   - 62 500 000 килобайт
//   ~ 61 035 мегабайт
//   ~ 59.6 гигайбайт

// Типы данных:
// String - строка (из символов)
// Целые числа:
// byte - 1 байт - от -128 до 127
//   00000000 - 0
//   00000001 - 1
//   00000010 - 2
//   ...
//   01111111 - 127
//   10000000 - -128
//   10000001 - -127
//   ...
//   11111110 - -2
//   11111111 - -1

//   1 + (-1) = 0
//   1111111
//   00000001 - 1
//  +11111111 - -1
//   --------
//  100000000 - типа 0
//   все старшие разряды, не помещающиеся в память, просто потеряются
//   и получится 00000000 - 0
//   1111111
//   01111111 - 127
//  +01111111 - 127
//   --------
//   11111110 - отрицательное число
//   в типе byte: 127 + 127 = -2 - integer overflow
// short - 2 байта - от -32_768 до 32_767
// int (по умолчанию) - 4 байта - от -2_147_483_648 до 2_147_483_647 - integer - англ. "целое" (число)
// long - 8 байтов - от -9_223_372_036_854_775_808 до -9_223_372_036_854_775_807

// Дробные числа:
// - float - 4 байта - от англ. floating point - плавающая точка
//   дробные числа хранятся так: знак - экспонента - мантисса
//   0.00000000000000123 = 1.23 * 10^-15 = 1.23e-15
//   1230000000000000 = 1.23 * 10^15 = 1.23e15
//   дробные числа хранятся с потерей точности - мантисса определяет количество
//     знаков после запятой в "научной" (scientific) записи
// - double (по умолчанию) - 8 байтов
//   ~13 знаков числа и степень до ~308

// Средняя операционная память:
// 8 гигабайт ~ 2 миллиарда чисел типа int ~ 1 миллиард чисел типа double
public class Main {

  public static void main(String[] args) {
    short catAge = 9;
    System.out.println("Возраст кота: " + catAge);
    int humanAge = (catAge - 2) * 4 + 24;
    System.out.println("Человеческий возраст кота: " + humanAge);

    // (catAge - 2) * 4 + 24;
    // (short - int) * int + int
    // int           * int + int
    // int                 + int
    // int

    // для каждой арифметической операции тип данных "вычисляется"
    // если оба аргумента одинаковые, результат "такой же"
    // если аргументы оба целые или оба дробные, но типы разные, выбирают "больший"
    // если аргументы целый и дробный, то результат дробный

    System.out.println();
    humanAge = 51;
    System.out.println("А если человеческий возраст кота будет " + humanAge);
    int catAgeCalculated = (humanAge - 24) / 4 + 2;
    // (humanAge - 24) / 4 + 2;
    // (int - int) / int + int;
    // int         / int + int;
    // !!! внимание !!! например, 29 / 5 = (int) 5.8 = 5
    //   дробная часть ОТБРАСЫВАЕТСЯ
    // int               + int;
    // int;
    System.out.println("[int] то расчётный возраст кота: " + catAgeCalculated);
    // если хочется разделить и получить ДРОБНОЕ число,
    //  то один из участников деления тоже ДОЛЖЕН быть дробным
    //  не "/ 4", а "/ 4.0"
    double doubleCatAgeCalculated = (humanAge - 24) / 4.0 + 2;
    // (humanAge - 24) / 4.0 + 2;
    // (int - int) / double + int;
    // int         / double + int;
    // double               + int;
    // double;
    System.out.println("[double] то расчётный дробный возраст кота: " + doubleCatAgeCalculated);
    int humanAgeCalculated = (catAgeCalculated - 2) * 4 + 24;
    System.out.println("[int] и расчётный человеческий возраст кота: " + humanAgeCalculated);
    double doubleHumanAgeCalculated = (doubleCatAgeCalculated - 2) * 4 + 24;
    System.out.println("[double] и расчётный человеческий возраст кота: " + doubleHumanAgeCalculated);
  }
}
